{"version":3,"sources":["Layout/Header/Header.js","Layout/Body/Movie/Movie.js","Layout/Body/TV/TV.js","Layout/Body/StarSearch/StarSearch.js","Layout/Body/StarSearch/StarSearchFunction/StarSearchFunction.js","Layout/Body/Movie/MovieFunctions/MovieFunctions.js","Layout/Body/TV/TVFunctions/TVFunctions.js","Layout/Footer/Footer.js","Layout/Layout.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","Movie","t","id","type","placeholder","onChange","inputHandler","TV","StarSearch","StarSearchRenderList","event","apikey","searchField","target","value","personSearch","Promise","resolve","reject","fetch","then","data","json","results","filter","people","name","forEach","person","personSearchWithID","starSearchDiv","document","getElementById","innerHTML","pName","createElement","pBiography","biography","placeOfBirth","place_of_birth","starImage","setAttribute","profile_path","appendChild","RenderMovieList","api","movieSearch","response","console","log","movieDiv","movieOverView","movieTilte","movieImage","movieReleaseDate","movie","title","poster_path","overview","release_date","cast","actorDiv","actorP","actorRole","actorPicture","character","TVFunctions","tvSearch","tvDiv","tvOverView","tvTilte","tvImage","tvReleaseDate","tv","first_air_date","Footer","src","Layout","state","apiKey","storedDate","RenderList","TVInputHandler","TVRenderList","startSearch","StarSearchFunction","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c833a0be.chunk.js","sourcesContent":["import React from \"react\"\nimport \"../../Styles/Style.css\"\n\nconst Header = (props) => {\nreturn (\n    <div className =\"header\">\n        <p>Movie App</p>\n    </div>\n)\n}\nexport default Header","import React from \"react\";\nimport \"../../../Styles/Style.css\"\n\nconst Movie = (props,t) => {\n    return (\n        <div>\n         \n            <input id=\"movie\" type=\"text\" placeholder=\"Please type a name of a movie\" onChange={props.inputHandler}></input>\n             <div id=\"movieDiv\"></div>\n        </div>\n    )\n}\nexport default Movie","import React, {Component} from \"react\";\nimport \"../../../Styles/Style.css\"\nconst TV = (props) =>{\nreturn(\n    <div>\n        <input id=\"tvInput\" onChange={props.inputHandler} placeholder=\"Please type a name of a TV show\"></input>\n        <div id=\"tvDiv\"></div>\n    </div>\n) \n}\nexport default TV;","import React from \"react\"\nimport \"../../../Styles/Style.css\"\n\nconst StarSearch = (props) => {\n    return (\n        <div>\n            <input type=\"text\" onChange={props.inputHandler} placeholder=\"Please type a name of a Celebrity\"></input>\n            <div id=\"startSearchDiv\">\n\n            </div>\n        </div>\n      \n    )\n}\n\nexport default StarSearch","import React from \"react\"\nimport \"../../../../Styles/Style.css\"\n\nconst StarSearchRenderList = (event,apikey) => {\n    let searchField = event.target.value\n    // storing the URL for searching movies\n    const personSearch = \"https://api.themoviedb.org/3/search/person?api_key=\" + apikey + \"&language=en-US&query=\" + searchField +\"&page=1&include_adult=false\"\n    const promise = new Promise((resolve,reject)=>{\n       const fetchStarData = fetch(personSearch)\n        resolve(fetchStarData)\n    })\n    promise.then((data)=> data.json())\n    .then((data)=>{\n       const filterPerson =  data.results.filter((people)=>{\n                return people.name === searchField\n        })\n        filterPerson.forEach((person)=>{\n            const personSearchWithID = \"https://api.themoviedb.org/3/person/\"+ person.id+\"?api_key=\"+ apikey+\"&language=en-US\"\n           const secondPromise =  new Promise((resolve,reject)=>{\n                    resolve(fetch(personSearchWithID))\n            })\n            secondPromise.then((data) => data.json())\n            .then((data) => {\n                const starSearchDiv = document.getElementById(\"startSearchDiv\");\n                starSearchDiv.innerHTML =\"\"\n                const pName = document.createElement(\"p\"); \n                pName.innerHTML = \"<strong> Name</strong>: \" + data.name\n                const pBiography = document.createElement(\"p\"); \n                pBiography.innerHTML = \"<strong>Description: </strong>\" + data.biography\n                const placeOfBirth = document.createElement(\"p\");\n                placeOfBirth.innerHTML = \"<strong>Place of Birth: </strong>\" + data.place_of_birth\n                const starImage = document.createElement(\"img\"); \n                starImage.setAttribute(\"src\",\"https://image.tmdb.org/t/p/w300/\" + data.profile_path)\n                starSearchDiv.setAttribute(\"class\",\"cardBody\")\n                starSearchDiv.appendChild(pName)\n                starSearchDiv.appendChild(pBiography)\n                starSearchDiv.appendChild(placeOfBirth)\n                starSearchDiv.appendChild(starImage)\n\n            })\n        })\n\n    })\n}\n\nexport default StarSearchRenderList","import React from \"react\"\nimport \"../../../../Styles/Style.css\"\nconst RenderMovieList = (event,api) => {\n\n        //storing the event\n        \n        let searchField = event.target.value\n\n        // storing the URL for searching movies\n       const movieSearch = \"https://api.themoviedb.org/3/search/movie?api_key=\" + api + \"&language=en-US&query=\" + searchField +\"&page=1&include_adult=false\"\n        // creating my promise    \n       const promise = new Promise((resolve,reject)=>{\n            const catchData =  fetch(movieSearch)\n            resolve(catchData);\n       })\n       // converting the data to json data\n       promise.then((response)=>response.json())\n       //converting the data to a object\n       .then((data)=>{\n           console.log(data)\n        // grabbed the div tag from the Movie.js\n        const movieDiv = document.getElementById(\"movieDiv\");\n        movieDiv.innerHTML =\"\"\n       // movieDiv.innerHTML=\"\"\n       // create p tag for movie over view\n        const movieOverView =document.createElement(\"p\")\n        movieOverView.innerHTML =\"\"\n        // create p tag for movie title\n        const movieTilte = document.createElement(\"p\")\n        movieTilte.innerHTML =\"\"\n        const movieImage = document.createElement(\"img\");\n        const movieReleaseDate = document.createElement(\"p\");\n        // filter through the list of objects        \n            let filteredMovieData = data.results.filter((movie)=>{\n                    return  movie.title === searchField\n            })\n         \n\n            // printing off the list of objects\n            filteredMovieData.forEach((movie)=>{\n                movieImage.setAttribute(\"src\",\"https://image.tmdb.org/t/p/w300/\" + movie.poster_path)\n                movieImage.setAttribute(\"alt\",\"Sorry, there are problems with the image\")\n                movieTilte.innerHTML=\"<Strong>Title: </Strong>\" + movie.title\n                movieOverView.innerHTML =\"<Strong>Movie Overview: </Strong>\" + movie.overview\n                movieReleaseDate.innerHTML= \"<Strong> Released: \" +  movie.release_date+ \"</Strong>\"\n                movieDiv.appendChild(movieTilte)\n                movieDiv.appendChild(movieOverView)\n                movieDiv.appendChild(movieImage)\n                movieDiv.appendChild(movieReleaseDate)\n                movieDiv.setAttribute(\"class\",\"cardBody\")\n                console.log(movieTilte)\n                console.log(movieOverView)\n                new Promise((resolve,reject)=>{\n                    const actorData = fetch(\"https://api.themoviedb.org/3/movie/\"+ movie.id+\"/credits?api_key=\" + api)\n                    resolve(actorData)\n                }).then((response)=> response.json())\n                .then((data)=>{\n                    data.cast.forEach((data)=>{\n                        const actorDiv = document.createElement(\"div\")\n                        actorDiv.setAttribute(\"class\",\"actorCard\")\n                        const actorP = document.createElement(\"p\");\n                        const actorRole = document.createElement(\"p\")\n                        const actorPicture = document.createElement(\"img\")\n                        actorPicture.setAttribute(\"src\",\"https://image.tmdb.org/t/p/w300/\" + data.profile_path)\n                        actorRole.innerHTML= \"Role: \" + data.character \n                        actorP.innerHTML = \"Crew: \" +  data.name\n                      movieDiv.appendChild(actorDiv)\n                        actorDiv.appendChild(actorP)\n                        actorDiv.appendChild(actorRole)\n                        actorDiv.appendChild(actorPicture)\n\n                        console.log(data)\n                    })\n                })\n            })\n       \n       })\n    \n}\nexport default RenderMovieList","import React from \"react\"\nimport \"../../../../Styles/Style.css\"\nconst TVFunctions = (event, apikey) => {\n //storing the event\n        \n let searchField = event.target.value\n\n // storing the URL for searching movies\nconst tvSearch = \"https://api.themoviedb.org/3/search/tv?api_key=\" + apikey + \"&language=en-US&query=\" + searchField +\"&page=1&include_adult=false\"\n // creating my promise    \nconst promise = new Promise((resolve,reject)=>{\n     const catchData =  fetch(tvSearch)\n     resolve(catchData);\n})\n// converting the data to json data\npromise.then((response)=>response.json())\n//converting the data to a object\n.then((data)=>{\n    console.log(data)\n // grabbed the div tag from the Movie.js\n const tvDiv = document.getElementById(\"tvDiv\");\n tvDiv.innerHTML =\"\"\n// movieDiv.innerHTML=\"\"\n// create p tag for movie over view\n const tvOverView =document.createElement(\"p\")\n tvOverView.innerHTML =\"\"\n // create p tag for movie title\n const tvTilte = document.createElement(\"p\")\n tvTilte.innerHTML =\"\"\n const tvImage = document.createElement(\"img\");\n const tvReleaseDate = document.createElement(\"p\");\n // filter through the list of objects        \n     let filtereTVData = data.results.filter((tv)=>{\n             return  tv.name === searchField\n     })\n  \n\n     // printing off the list of objects\n     filtereTVData.forEach((tv)=>{\n         tvImage.setAttribute(\"src\",\"https://image.tmdb.org/t/p/w300/\" + tv.poster_path)\n         tvImage.setAttribute(\"alt\",\"Sorry, there are problems with the image\")\n         tvTilte.innerHTML=\"<Strong>Title: </Strong>\" + tv.name\n         tvOverView.innerHTML =\"<Strong>Movie Overview: </Strong>\" + tv.overview\n         tvReleaseDate.innerHTML= \"<Strong> Released: \" +  tv.first_air_date+ \"</Strong>\"\n         tvDiv.appendChild(tvTilte)\n         tvDiv.appendChild(tvOverView)\n         tvDiv.appendChild(tvImage)\n         tvDiv.appendChild(tvReleaseDate)\n         console.log(tvTilte)\n         console.log(tvOverView)\n         new Promise((resolve,reject)=>{\n             const actorData = fetch(\"https://api.themoviedb.org/3/tv/\"+ tv.id+\"/credits?api_key=\" + apikey)\n             resolve(actorData)\n         }).then((response)=> response.json())\n         .then((data)=>{\n             data.cast.forEach((data)=>{\n                 const actorP = document.createElement(\"p\");\n                 const actorRole = document.createElement(\"p\")\n                 const actorPicture = document.createElement(\"img\")\n                 const actorDiv = document.createElement(\"div\")\n                 actorDiv.setAttribute(\"class\",\"actorCard\")\n                 actorPicture.setAttribute(\"src\",\"https://image.tmdb.org/t/p/w300/\" + data.profile_path)\n                 actorRole.innerHTML= \"Role: \" + data.character \n                 actorP.innerHTML = \"Crew: \" +  data.name\n                 tvDiv.setAttribute(\"class\",\"cardBody\")\n                 tvDiv.appendChild(actorDiv)\n                 actorDiv.appendChild(actorP)\n                 actorDiv.appendChild(actorRole)\n                 actorDiv.appendChild(actorPicture)\n\n                 console.log(data)\n             })\n         })\n     })\n\n})\n}\nexport default TVFunctions","import React from \"react\"\nconst Footer = () => {\n    return (\n        <div className=\"footer\">\n       <img src=\"../../img/Twitter_Logo.jpg\"></img>\n        </div>\n    )\n\n}\nexport default Footer","import React, {Component} from \"react\";\nimport Header from \"./Header/Header\"\nimport Movie from \"./Body/Movie/Movie\"\nimport TV from \"./Body/TV/TV\"\nimport StarSearch from \"./Body/StarSearch/StarSearch\"\nimport StarSearchFunction from \"./Body/StarSearch/StarSearchFunction/StarSearchFunction\"\nimport RenderList from \"./Body/Movie/MovieFunctions/MovieFunctions\"\nimport TVRenderList from \"./Body/TV/TVFunctions/TVFunctions\"\nimport Footer from \"./Footer/Footer\"\nclass Layout extends Component{\n    // creatong the states\n    state = {\n        apiKey:\"b2f49c297ee42a377615666c4da25acf\",\n        storedDate:[]\n    }\n    // creating input hnadler function where it will pull from the movie dba apt anytime someone types something\n    inputHandler =  (event) => {\n\n        RenderList(event, this.state.apiKey)\n    }\n    TVInputHandler= (event) => {\n \n        TVRenderList(event, this.state.apiKey)\n    }\n    startSearch = (event) => {\n        StarSearchFunction(event,this.state.apiKey)\n    }\n    render(){\n        return (\n            <div>\n            <Header></Header>\n            <Movie inputHandler={this.inputHandler}></Movie>\n            <TV inputHandler={this.TVInputHandler}></TV>\n            <StarSearch inputHandler={this.startSearch}></StarSearch>\n            <Footer></Footer>\n\n        \n            </div>\n        )\n    }\n}\nexport default Layout","import React, { Component } from 'react';\nimport './App.css';\nimport Layout from \"./Layout/Layout\"\n\nclass App extends Component {\n\n  render(){\n        return (\n          <div className=\"App\">\n            <Layout></Layout>\n          </div>\n        )\n  }\n \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}